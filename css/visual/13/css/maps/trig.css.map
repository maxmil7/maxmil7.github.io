{"version":3,"file":"../trig.css","sources":["trig.scss","_trig.scss"],"sourcesContent":["@import \"_trig\";\n\n.atom {\n    text-align: center;\n    border-radius: 5px;\n    height: 10px;\n    width: 10px;\n    margin: 1px;\n    display: inline-block;\n    border: 1px #189375 solid;\n    //apply animation\n    animation: oscillate 3s ease-in-out infinite;\n    //15 classes for 15 divs\n    @for $i from 1 through 15 {\n        $delay: (sin(.4) * ($i));\n        &:nth-child(#{$i}) {\n            animation-delay: #{$delay}s;\n        }\n    }\n}\n\n@keyframes oscillate {\n    0% { transform: translateY(0px); }\n    50% { transform: translateY(100px); }\n}\n\n.clear {\n    margin-top: 120px;\n}","//sin(x) = summation(n=0-10) (-1)^n/(2n+1)! * x^2n+1;\n//cos(x) = summation(n=0-10) (-1)^n/(2n)! * x^2n;\n\n//power function\n@function pow($number, $exp) {\n  $value: 1;\n  @if $exp > 0 {\n    @for $i from 1 through $exp {\n      $value: $value * $number;\n    }\n  } @else if $exp < 0 {\n    @for $i from 1 through -$exp {\n      $value: $value / $number;\n    }\n\n  }\n  @return $value;\n}\n\n//factorial function\n@function fact($number) {\n  $value: 1;\n  @if $number > 0 {\n    @for $i from 1 through $number {\n      $value: $value * $i;\n    }\n  }\n  @return $value;\n}\n\n//pi function\n@function pi() {\n  @return 3.14159265359;\n}\n\n//radians function\n@function rad($angle) {\n  $unit: unit($angle);\n  $unitless: $angle / ($angle * 0 + 1);\n  //If angle has 'deg' as unit, conver to radians\n  @if $unit == deg {\n    $unitless: $unitless / 180 * pi();\n  }\n  @return $unitless;\n}\n\n//sin function\n@function sin($angle) {\n  $sin: 0;\n  $angle: rad($angle);\n  //Iterate a bunch of times\n  @for $i from 0 through 10 {\n    $sin: $sin + pow(-1, $i) * pow($angle, (2 * $i+1 )) / fact(2 * $i + 1);\n  }\n  @return $sin;\n}\n\n//cos function \n@function cos($angle) {\n  $cos: 0;\n  $angle: rad($angle);\n  //Iterate a bunch of times\n  @for $i from 0 through 10 {\n    $cos: $cos + pow(-1, $i) * pow($angle, 2 * $i) / fact(2 * $i);\n  }\n  @return $cos;\n}\n\n//tan function\n@function tan($angle) {\n  @return sin($angle) / cos($angle);\n}\n\n@debug sin(pi()/4);\n@debug cos(45deg);\n@debug tan(45deg);\n"],"names":[],"mappings":"AAEA,AAAA,KAAK,CAAC;EACF,UAAU,EAAE,MAAM;EAClB,aAAa,EAAE,GAAG;EAClB,MAAM,EAAE,IAAI;EACZ,KAAK,EAAE,IAAI;EACX,MAAM,EAAE,GAAG;EACX,OAAO,EAAE,YAAY;EACrB,MAAM,EAAE,iBAAiB;EAEzB,SAAS,EAAE,iCAAiC,GAQ/C;EAjBD,AAaQ,KAbH,AAaI,UAAW,CAAA,CAAC,EAAM;IACf,eAAe,EAAC,QAAC,GACpB;EAfT,AAaQ,KAbH,AAaI,UAAW,CAAA,CAAC,EAAM;IACf,eAAe,EAAC,QAAC,GACpB;EAfT,AAaQ,KAbH,AAaI,UAAW,CAAA,CAAC,EAAM;IACf,eAAe,EAAC,QAAC,GACpB;EAfT,AAaQ,KAbH,AAaI,UAAW,CAAA,CAAC,EAAM;IACf,eAAe,EAAC,QAAC,GACpB;EAfT,AAaQ,KAbH,AAaI,UAAW,CAAA,CAAC,EAAM;IACf,eAAe,EAAC,QAAC,GACpB;EAfT,AAaQ,KAbH,AAaI,UAAW,CAAA,CAAC,EAAM;IACf,eAAe,EAAC,QAAC,GACpB;EAfT,AAaQ,KAbH,AAaI,UAAW,CAAA,CAAC,EAAM;IACf,eAAe,EAAC,QAAC,GACpB;EAfT,AAaQ,KAbH,AAaI,UAAW,CAAA,CAAC,EAAM;IACf,eAAe,EAAC,QAAC,GACpB;EAfT,AAaQ,KAbH,AAaI,UAAW,CAAA,CAAC,EAAM;IACf,eAAe,EAAC,QAAC,GACpB;EAfT,AAaQ,KAbH,AAaI,UAAW,CAAA,EAAE,EAAK;IACf,eAAe,EAAC,QAAC,GACpB;EAfT,AAaQ,KAbH,AAaI,UAAW,CAAA,EAAE,EAAK;IACf,eAAe,EAAC,OAAC,GACpB;EAfT,AAaQ,KAbH,AAaI,UAAW,CAAA,EAAE,EAAK;IACf,eAAe,EAAC,QAAC,GACpB;EAfT,AAaQ,KAbH,AAaI,UAAW,CAAA,EAAE,EAAK;IACf,eAAe,EAAC,QAAC,GACpB;EAfT,AAaQ,KAbH,AAaI,UAAW,CAAA,EAAE,EAAK;IACf,eAAe,EAAC,QAAC,GACpB;EAfT,AAaQ,KAbH,AAaI,UAAW,CAAA,EAAE,EAAK;IACf,eAAe,EAAC,QAAC,GACpB;;AAIT,UAAU,CAAV,SAAU;EACN,EAAE;IAAG,SAAS,EAAE,eAAe;EAC/B,GAAG;IAAG,SAAS,EAAE,iBAAiB;;AAGtC,AAAA,MAAM,CAAC;EACH,UAAU,EAAE,KAAK,GACpB"}